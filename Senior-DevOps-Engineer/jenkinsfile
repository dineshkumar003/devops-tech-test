properties([ parameters([
  string( name: 'AWS_ACCESS_KEY_ID', defaultValue: ''),
  string( name: 'AWS_SECRET_ACCESS_KEY', defaultValue: ''),
  string( name: 'AWS_REGION', defaultValue: ''),
]), pipelineTriggers([]) ])

// Environment Variables.
env.access_key = AWS_ACCESS_KEY_ID
env.secret_key = AWS_SECRET_ACCESS_KEY
env.aws_region = AWS_REGION


pipeline {
    agent any
    pipeline{
agent any
	environment{
	DOCKER_HUB_REPO = "flaskrepo"
	REGISTRY_CREDENTIAL = "dockerhub"
	CONTAINER_NAME = "flaskcontainer"
	dockerImage = ''
	PATH = "/usr/local/bin/terraform:$PATH"
	SECRET_FILE_ID = credentials('flaskvar')
	}

	tools {
        terraform 'terraform'
    }

	stages{
		stage('Clean'){
		steps{
			script{
				sh 'rm -rf $PWD/app'
				echo 'Project Cleaned'
				}
			}
		}
	stage('GITHUB'){
		steps{
			script{
				sh 'git clone https://github.com/dineshkumar003/devops-tech-test.git $PWD/app'
				sh 'ls'
				}
			}
		}
	stage('Build Image') {
		steps {
			script {
				sh 'env'
				sh 'pwd'
				// Building new image
				sh 'docker image build . -f ./app/Dockerfile -t dineshkumar003/app'
				sh 'docker image tag $DOCKER_HUB_REPO:latest $DOCKER_HUB_REPO:$BUILD_NUMBER'
				// Pushing Image to Repository
				docker.withRegistry( '', REGISTRY_CREDENTIAL ) {	
				sh 'docker push dineshkumar003/app:$BUILD_NUMBER'
				sh 'docker push dineshkumar003/app:latest'
				}

				echo "Image built and pushed to repository"
			}
		}
	}
    stage {
         stage ('Terraform Init'){
            steps {
            sh "export TF_VAR_aws_region='${env.aws_region}' && terraform init"
          }
       }
         stage ('Terraform Plan'){
            steps {
            sh "export TF_VAR_aws_region='${env.aws_region}' && terraform plan" 
         }
      }
         stage ('Terraform Apply & Deploy Docker Image on Webserver'){
            steps {
            sh "export TF_VAR_aws_region='${env.aws_region}' && terraform apply -auto-approve"
         }
      }
         stage('Terraform validate') {
            steps {
            sh "export TF_VAR_aws_region='${env.aws_region}' && terraform validate"
         }
      }
        stage('Terraform destroy') {
            steps {
		    sh "export TF_VAR_aws_region='${env.aws_region}' && terraform destroy"
         }
      }
    }
  }
